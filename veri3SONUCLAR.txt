> veri<-cbind(yanıtlar,rt)
> veri<-cbind(veri,tsüre)
> veri<-cbind(veri,basari)
> veri<-cbind(veri,hız)
> veri<-cbind(veri,yetenek)
> veri<-cbind(veri,lz)
> veri<-cbind(veri,zu3)
> veri<-cbind(veri,ceksi)
> veri<-cbind(veri,cartı)
> veri<-cbind(veri,lt)
> veri<-cbind(veri,flagged)
> 
> veri<-edit(veri)
> 
> 

> ncol(veri)
[1] 350
> 
> ölcekleme<-function(x,na.rm=T){
+     return((x-min(x))/(max(x)-min(x)))
+ }
> 
> 
> library(caret)

> veri$flagged = factor(veri$flagged, levels = c(0, 1))

> veri[-350]<-ölcekleme(veri[-350])
> control <- rfeControl(functions=rfFuncs, method="cv", number=5)
> results <- rfe(veri[,1:349], veri$flagged, sizes=c(1:349), rfeControl=control)
> predictors(results)

[1] "hız"     "tsüre"   "basari"  "ZU3"     "yetenek" "idur.15" "idur.81" "idur.77"
 
> 
> d1<-rt[,15]
> d2<-rt[,81]
> d3<-rt[,77]
> 
> veri<-cbind(hız,tsüre)
> veri<-cbind(veri,basari)
> veri<-cbind(veri,zu3)
> veri<-cbind(veri,yetenek)
> veri<-cbind(veri,d1)
> veri<-cbind(veri,d2)
> veri<-cbind(veri,d3)
> veri<-cbind(veri,flagged)
> 
> veri<-edit(veri)
> ncol(veri)
[1] 9

> ölcekleme<-function(x,na.rm=T){
+ return((x-min(x))/(max(x)-min(x)))
+ }
> veri$flagged = factor(veri$flagged, levels = c(0, 1))
> veri[-9]<-ölcekleme(veri[-9])
> library(caTools)
> set.seed(123)
> split = sample.split(veri$flagged, SplitRatio = 0.70)
> egitimset = subset(veri, split == TRUE)
> testset = subset(veri, split == FALSE)
> 
> library(randomForest)


> classifier = randomForest(x = egitimset[-9],
+ y = egitimset$flagged,
+ ntree = 1000)
> y_pred = predict(classifier, newdata = testset[-9])
> cm = table(testset[, 9], y_pred)
> cm
   y_pred
      0   1
  0 474   3
  1   6   8
> 
> library(e1071)
> classifier = naiveBayes(x = egitimset[-9],
+ y = egitimset$flagged)
> y_pred = predict(classifier, newdata = testset[-9])
> cm = table(testset[, 9], y_pred)
> cm
   y_pred
      0   1
  0 450  27
  1   5   9
> 
> library(class)
> y_pred = knn(train = egitimset[,-9],
+ test = testset[,-9],
+ cl = egitimset[,9],
+ k = 5)
> cm = table(testset[, 9], y_pred)
> cm
   y_pred
      0   1
  0 477   0
  1   9   5
> 
> 
> 
> 
> 
> 
> library(cluster)
> library(factoextra)
> 
> distance<-get_dist(veri[,1:8])
> k<-kmeans(distance,2,nstart=25)
> cm=table(veri$flagged,k$cluster)
> cm
   
       1    2
  0  409 1181
  1   23   23
> 
> library(ClusterR)

> veri<-veri[,-9]
> veri<-center_scale(veri, mean_center = TRUE, sd_scale = TRUE)
> gmm = GMM(veri,2 , "eucl_dist", "random_spread", 100000, 50000)
> pr = predict_GMM(veri, gmm$centroids, gmm$covariance_matrices, gmm$weights)
> cm = table(flagged, pr$cluster_labels)
> cm
       
flagged   0   1
      0 548 1042
      1  26  20
> 
> 
> library(cluster)
> library(factoextra)
> library(tidyverse) 
> library(randomForest)
> 
> rf.fit <- randomForest(x = veri, y = NULL, ntree = 10000, proximity = TRUE, oob.prox = TRUE)
> hclust.rf <- hclust(as.dist(1-rf.fit$proximity), method = "average")
> rf.cluster = cutree(hclust.rf, k=2)
> veriseti.pc <- prcomp(veri, center = FALSE, scale. = FALSE)$x %>% as.data.frame()
> veriseti.pc$rf.clusters <- rf.cluster
> table(rf.cluster,flagged)
          flagged
rf.cluster   0   1
         1 529  19
         2 1061 27






 rf
 
    2    3    6    8    9   13   16   21   25   26   29   31   36   37   39   42 
   1    1    0    1    0    0    0    0    0    0    0    0    0    0    0    0 
  55   58   63   64   70   72   73   74   76   78   89   92   93   94  102  111 
   0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0 
 113  114  118  121  122  125  133  139  142  145  146  147  149  154  159  160 
   0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0 
 176  182  183  188  190  193  199  200  203  205  212  216  228  231  232  234 
   0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0 
 235  241  242  251  252  254  260  262  263  264  270  271  275  276  277  279 
   0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0 
 286  290  291  293  297  310  311  312  313  316  317  319  320  329  332  333 
   0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0 
 336  337  340  343  346  349  350  353  356  363  368  372  376  379  382  389 
   0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0 
 392  393  396  398  400  402  407  409  410  415  417  418  420  424  429  434 
   0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0 
 442  447  448  451  462  464  465  466  475  476  477  481  490  492  495  502 
   0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0 
 504  508  513  514  517  519  523  524  533  537  539  542  544  551  553  555 
   0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0 
 558  560  562  565  567  569  570  572  573  578  586  587  592  594  596  599 
   0    0    0    0    0    0    0    0    0    0    0    0    0    0    1    0 
 600  605  606  607  609  613  617  620  623  625  632  634  641  643  644  646 
   0    0    0    0    0    0    0    0    1    0    0    0    0    0    0    0 
 647  649  650  651  656  659  660  662  665  666  667  670  671  675  679  680 
   0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0 
 683  684  685  690  691  693  696  706  710  711  712  713  714  730  733  743 
   0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0 
 748  751  752  753  755  756  758  761  763  766  767  770  776  778  779  787 
   0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0 
 800  801  803  809  811  814  819  820  824  835  838  841  843  844  853  854 
   0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0 
 859  861  863  866  870  871  876  881  882  883  886  889  904  906  909  910 
   0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0 
 913  916  917  923  926  929  930  934  935  937  941  942  943  947  950  955 
   0    0    0    1    0    0    0    0    0    0    0    0    0    0    0    0 
 958  959  964  965  967  969  972  973  975  988  991 1000 1004 1006 1008 1012 
   0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0 
1017 1018 1020 1021 1031 1034 1039 1040 1042 1051 1057 1060 1076 1077 1084 1085 
   0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0 
1086 1087 1088 1095 1096 1101 1104 1106 1107 1108 1109 1120 1124 1126 1130 1131 
   0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0 
1132 1136 1137 1139 1140 1143 1144 1147 1153 1158 1162 1167 1168 1170 1171 1176 
   0    0    0    0    0    0    0    0    0    0    0    0    1    0    0    1 
1177 1180 1187 1189 1190 1194 1206 1210 1213 1220 1221 1224 1230 1233 1235 1237 
   0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0 
1238 1240 1242 1245 1248 1252 1254 1256 1260 1261 1265 1275 1276 1282 1287 1288 
   0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0 
1293 1296 1302 1305 1308 1310 1313 1315 1320 1322 1325 1329 1332 1335 1336 1337 
   0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0 
1342 1343 1351 1353 1355 1358 1361 1363 1365 1377 1378 1379 1386 1398 1403 1413 
   0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    1 
1417 1419 1424 1427 1430 1434 1439 1449 1452 1454 1455 1456 1460 1463 1465 1468 
   0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0 
1472 1473 1475 1477 1478 1482 1489 1490 1496 1497 1500 1502 1503 1505 1506 1507 
   0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0 
1510 1511 1515 1517 1520 1522 1523 1524 1525 1527 1528 1529 1531 1534 1537 1538 
   0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0 
1540 1541 1545 1546 1549 1556 1557 1565 1567 1569 1575 1576 1577 1583 1585 1587 
   0    0    0    0    0    0    0    0    0    0    0    0    0    0    1    0 
1595 1596 1605 1606 1608 1613 1615 1618 1620 1622 1631 
   0    0    0    0    0    0    0    0    1    0    0 



naiveBayes

> y_pred
  [1] 1 1 0 1 1 0 0 1 0 1 1 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 [38] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 [75] 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[112] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0
[149] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1
[186] 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0
[223] 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0
[260] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0
[297] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[334] 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[371] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0
[408] 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[445] 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0
[482] 0 0 0 0 0 0 0 1 0 0


knn

> y_pred
  [1] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 [82] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[163] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[244] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[325] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[406] 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0
[487] 0 0 1 0 0

