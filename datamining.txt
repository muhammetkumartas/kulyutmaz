> yanıtlar<-read.table("yanıtlarikili.txt",header=T)
> rt<-read.table("RT.txt",header=T)
> demografik<-read.table("demografik.txt",header=T)
> tsüre<-demografik[,10]
> deneme<-read.table("deneme.txt",header=T)
> hız<-read.table("hız.txt",header=T)
> yetenek<-read.table("yetenek.txt",header=T)
> akb<-read.table("AKB.txt",header=T)
> dkb<-read.table("DKB.txt",header=T)
> ekb<-read.table("EKB.txt",header=T)
> g<-read.table("G.txt",header=T)
> ht<-read.table("Ht.txt",header=T)
> lz<-read.table("lz.txt",header=T)
> lzs<-read.table("lzstar.txt",header=T)
> ncı<-read.table("NCI.txt",header=T)
> pbs<-read.table("PBS.txt",header=T)
> csato<-read.table("CSato.txt",header=T)
> cstar<-read.table("CStar.txt",header=T)
> u3<-read.table("U3.txt",header=T)
> zu3<-read.table("ZU3.txt",header=T)
> lt<-read.table("ChiRT.txt",header=T)
> flagged<-demografik[,3]

 
> veri<-cbind(yanıtlar,rt)
> veri<-cbind(veri,tsüre)
> veri<-cbind(veri,deneme)
> veri<-cbind(veri,hız)
> veri<-cbind(veri,yetenek)
> veri<-cbind(veri,akb)
> veri<-cbind(veri,dkb)
> veri<-cbind(veri,ekb)
> veri<-cbind(veri,g)
> veri<-cbind(veri,ht)
> veri<-cbind(veri,lz)
> veri<-cbind(veri,lzs)
> veri<-cbind(veri,ncı)
> veri<-cbind(veri,pbs)
> veri<-cbind(veri,csato)
> veri<-cbind(veri,cstar)
> veri<-cbind(veri,u3)
> veri<-cbind(veri,zu3)
> veri<-cbind(veri,lt)
> veri<-cbind(veri,flagged)
> 
> veri<-edit(veri)
> veri<-read.table("veri.txt",header=T)

> ölcekleme<-function(x,na.rm=T){
+ return((x-min(x))/(max(x)-min(x)))
+ }

> veri$flagged = factor(veri$flagged, levels = c(0, 1))

> veri[-359]<-ölcekleme(veri[-359])

> library(caTools)
> set.seed(123)
> split = sample.split(veri$flagged, SplitRatio = 0.70)
> egitimset = subset(veri, split == TRUE)
> testset = subset(veri, split == FALSE)

> library(class)

> library(caret)

> knnFit1 <- train(egitimset[-359], egitimset[,359],
+ "knn",
+ tuneLength = 10,
+ trControl = trainControl(method = "repeatedcv"))
> importance <- varImp(knnFit1, scale=FALSE)
> print(importance)

> plot(importance)

> importance<-edit(importance)
> imp<-c(0.526701482479784, 0.53812893081761, 0.538746630727763, 
+ 0.517786949685535, 0.530632300089847, 0.504337938005391, 0.514684411500449, 
+ 0.525297619047619, 0.555382412398922, 0.509181266846361, 0.523177785265049, 
+ 0.594578279424978, 0.548110399820306, 0.534857929020665, 0.568522574123989, 
+ 0.547183849955076, 0.500603661275831, 0.526434748427673, 0.523065476190476, 
+ 0.557038971248877, 0.545386904761905, 0.535587938005391, 0.507651055705301, 
+ 0.5290459344115, 0.510388589398023, 0.576664982030548, 0.56615004492363, 
+ 0.564900606469003, 0.5575724393531, 0.543323225516622, 0.547464622641509, 
+ 0.596866576819407, 0.523851639712489, 0.526645327942498, 0.532359052111411, 
+ 0.580680031446541, 0.539280098831986, 0.505854110512129, 0.593034029649596, 
+ 0.50543295148248, 0.518460804132974, 0.530505952380952, 0.566332547169811, 
+ 0.592416329739443, 0.56980008984726, 0.546088836477987, 0.501193283917341, 
+ 0.536023135669362, 0.553136230907457, 0.52776841868823, 0.506584119496855, 
+ 0.509476078167116, 0.503930817610063, 0.504099281221923, 0.53320137017071, 
+ 0.562275381850854, 0.635795709793351, 0.570810871518419, 0.57141453279425, 
+ 0.524567610062893, 0.519920822102426, 0.559341307277628, 0.626965408805031, 
+ 0.570277403414196, 0.521451033243486, 0.507033355795148, 0.543154761904762, 
+ 0.527333221024259, 0.521493149146451, 0.552336028751123, 0.508338948787062, 
+ 0.545106132075472, 0.644934860736748, 0.564549640610961, 0.521731805929919, 
+ 0.541793014375562, 0.590886118598383, 0.56283692722372, 0.507594901168014, 
+ 0.513645552560647, 0.524651841868823, 0.557249550763702, 0.504029088050314, 
+ 0.523107592093441, 0.514235175202156, 0.62831311769991, 0.517028863432165, 
+ 0.507735287511231, 0.510065700808625, 0.516958670260557, 0.529144204851752, 
+ 0.506752583108715, 0.58856974393531, 0.566248315363881, 0.593511343216532, 
+ 0.577001909254268, 0.609599618149146, 0.531474618149146, 0.623961141060198, 
+ 0.544713050314465, 0.508689914645103, 0.50534871967655, 0.514333445642408, 
+ 0.593160377358491, 0.533075022461815, 0.540515498652291, 0.526336477987421, 
+ 0.55052504492363, 0.517379829290207, 0.532176549865229, 0.559636118598383, 
+ 0.536654874213836, 0.523837601078167, 0.502274258760108, 0.591461702605571, 
+ 0.546495956873315, 0.515512690925427, 0.56581311769991, 0.525620507637017, 
+ 0.555185871518419, 0.511118598382749, 0.536949685534591, 0.547113656783468, 
+ 0.538957210242588, 0.524651841868823, 0.50543295148248, 0.580792340521114, 
+ 0.500056154537287, 0.528849393530997, 0.565504267744834, 0.514993261455526, 
+ 0.531376347708895, 0.528442273135669, 0.53982760557053, 0.506598158131177, 
+ 0.554638364779874, 0.528933625336927, 0.542438791554358, 0.528119384546271, 
+ 0.581648697214735, 0.502021563342318, 0.51273304132974, 0.593258647798742, 
+ 0.532457322551662, 0.528891509433962, 0.54169474393531, 0.57141453279425, 
+ 0.564016172506739, 0.520047169811321, 0.570319519317161, 0.520299865229111, 
+ 0.607900943396226, 0.570852987421384, 0.554104896675651, 0.534998315363881, 
+ 0.537230458221024, 0.609431154537287, 0.539322214734951, 0.537721810422282, 
+ 0.526898023360287, 0.528091307277628, 0.528765161725067, 0.529340745732255, 
+ 0.539729335130279, 0.530983265947889, 0.553051999101527, 0.502456761006289, 
+ 0.509448000898473, 0.5298882524708, 0.524722035040431, 0.5696316262354, 
+ 0.629183513027853, 0.562865004492363, 0.610273472596586, 0.504885444743935, 
+ 0.646029874213836, 0.627316374663073, 0.670162286612758, 0.619679357592093, 
+ 0.629941599281222, 0.508521451033243, 0.638224393530997, 0.633521451033243, 
+ 0.675300426774483, 0.656643081761006, 0.692231019766397, 0.681688005390836, 
+ 0.730079177897574, 0.64240790655885, 0.626839061096137, 0.694603548966757, 
+ 0.599997192273136, 0.552321990116801, 0.664631064690027, 0.578588274932615, 
+ 0.701707097933513, 0.617405098831986, 0.64461197214735, 0.613263701707098, 
+ 0.77420260557053, 0.686208445642408, 0.543126684636119, 0.647517969451932, 
+ 0.610526168014376, 0.548349056603774, 0.603675314465409, 0.678318733153639, 
+ 0.782064240790656, 0.655014600179695, 0.604068396226415, 0.646324685534591, 
+ 0.656811545372866, 0.659942160826595, 0.535966981132076, 0.513701707097934, 
+ 0.658538297394429, 0.60020777178796, 0.630854110512129, 0.614920260557053, 
+ 0.59943564690027, 0.565771001796945, 0.687696540880503, 0.592093441150045, 
+ 0.568592767295597, 0.515695193171608, 0.591489779874214, 0.51876965408805, 
+ 0.705595799640611, 0.719508086253369, 0.541821091644205, 0.577675763701707, 
+ 0.539406446540881, 0.536711028751123, 0.614527178796047, 0.658734838274933, 
+ 0.637704964061096, 0.774693957771788, 0.703616352201258, 0.538999326145553, 
+ 0.598101976639712, 0.517969451931716, 0.631822776280323, 0.578714622641509, 
+ 0.594451931716083, 0.581634658580413, 0.697888589398023, 0.62669867475292, 
+ 0.685857479784367, 0.538718553459119, 0.572621855345912, 0.746616689128482, 
+ 0.652319182389937, 0.664378369272237, 0.566121967654986, 0.574418800539084, 
+ 0.68919867475292, 0.663507973944295, 0.511202830188679, 0.679526055705301, 
+ 0.568985849056604, 0.610315588499551, 0.591377470799641, 0.567062556154537, 
+ 0.560183625336927, 0.532499438454627, 0.748413634321653, 0.606539195867026, 
+ 0.589285714285714, 0.617194519317161, 0.651617250673854, 0.53600909703504, 
+ 0.698534366576819, 0.637873427672956, 0.521675651392633, 0.70329346361186, 
+ 0.605275718778077, 0.694238544474393, 0.671018643306379, 0.532766172506739, 
+ 0.732493823000898, 0.5709933737646, 0.585495283018868, 0.632243935309973, 
+ 0.71883423180593, 0.512073225516622, 0.552251796945193, 0.621293800539084, 
+ 0.545822102425876, 0.521591419586703, 0.606258423180593, 0.618528189577718, 
+ 0.601962601078167, 0.643488881401617, 0.612631963162624, 0.575078616352201, 
+ 0.596627920035939, 0.605921495956873, 0.746406109613657, 0.577015947888589, 
+ 0.599912960467206, 0.567062556154537, 0.649062219227314, 0.541006850853549, 
+ 0.57617362982929, 0.645749101527403, 0.576875561545373, 0.621799191374663, 
+ 0.709638926325247, 0.631134883198562, 0.701033243486074, 0.689942722371968, 
+ 0.514403638814016, 0.51248034591195, 0.618794923629829, 0.712165880503145, 
+ 0.50169867475292, 0.54288802785265, 0.545709793351303, 0.686854222821204, 
+ 0.705399258760108, 0.688215970350404, 0.67866969901168, 0.553094115004492, 
+ 0.603422619047619, 0.51902234950584, 0.596838499550764, 0.596038297394429, 
+ 0.629141397124888, 0.727903189577718, 0.604012241689128, 0.664883760107817, 
+ 0.791063005390836, 0.729124550763702, 0.54976695867026, 0.60784478885894, 
+ 0.744089734950584, 0.584709119496855, 0.677153526504942, 0.617180480682839, 
+ 0.637494384546271, 0.678164308176101, 0.546102875112309, 0.723607367475292, 
+ 0.528863432165319, 0.515526729559748, 0.523500673854447, 0.513631513926325, 
+ 0.5022040655885, 0.530772686433064, 0.50891453279425, 0.512157457322552, 
+ 0.504071203953279, 0.527108602875112, 0.526013589398023, 0.543028414195867, 
+ 0.519050426774483, 0.515049415992812, 0.578419811320755)


> col<-c("iraw.1", "iraw.2", 
+ "iraw.3", "iraw.4", "iraw.5", "iraw.6", "iraw.7", "iraw.8", "iraw.9", 
+ "iraw.10", "iraw.11", "iraw.12", "iraw.13", "iraw.14", "iraw.15", 
+ "iraw.16", "iraw.17", "iraw.18", "iraw.19", "iraw.20", "iraw.21", 
+ "iraw.22", "iraw.23", "iraw.24", "iraw.25", "iraw.26", "iraw.27", 
+ "iraw.28", "iraw.29", "iraw.30", "iraw.31", "iraw.32", "iraw.33", 
+ "iraw.34", "iraw.35", "iraw.36", "iraw.37", "iraw.38", "iraw.39", 
+ "iraw.40", "iraw.41", "iraw.42", "iraw.43", "iraw.44", "iraw.45", 
+ "iraw.46", "iraw.47", "iraw.48", "iraw.49", "iraw.50", "iraw.51", 
+ "iraw.52", "iraw.53", "iraw.54", "iraw.55", "iraw.56", "iraw.57", 
+ "iraw.58", "iraw.59", "iraw.60", "iraw.61", "iraw.62", "iraw.63", 
+ "iraw.64", "iraw.65", "iraw.66", "iraw.67", "iraw.68", "iraw.69", 
+ "iraw.70", "iraw.71", "iraw.72", "iraw.73", "iraw.74", "iraw.75", 
+ "iraw.76", "iraw.77", "iraw.78", "iraw.79", "iraw.80", "iraw.81", 
+ "iraw.82", "iraw.83", "iraw.84", "iraw.85", "iraw.86", "iraw.87", 
+ "iraw.88", "iraw.89", "iraw.90", "iraw.91", "iraw.92", "iraw.93", 
+ "iraw.94", "iraw.95", "iraw.96", "iraw.97", "iraw.98", "iraw.99", 
+ "iraw.100", "iraw.101", "iraw.102", "iraw.103", "iraw.104", "iraw.105", 
+ "iraw.106", "iraw.107", "iraw.108", "iraw.109", "iraw.110", "iraw.111", 
+ "iraw.112", "iraw.113", "iraw.114", "iraw.115", "iraw.116", "iraw.117", 
+ "iraw.118", "iraw.119", "iraw.120", "iraw.121", "iraw.122", "iraw.123", 
+ "iraw.124", "iraw.125", "iraw.126", "iraw.127", "iraw.128", "iraw.129", 
+ "iraw.130", "iraw.131", "iraw.132", "iraw.133", "iraw.134", "iraw.135", 
+ "iraw.136", "iraw.137", "iraw.138", "iraw.139", "iraw.140", "iraw.141", 
+ "iraw.142", "iraw.143", "iraw.144", "iraw.145", "iraw.146", "iraw.147", 
+ "iraw.148", "iraw.149", "iraw.150", "iraw.151", "iraw.152", "iraw.153", 
+ "iraw.154", "iraw.155", "iraw.156", "iraw.157", "iraw.158", "iraw.159", 
+ "iraw.160", "iraw.161", "iraw.162", "iraw.163", "iraw.164", "iraw.165", 
+ "iraw.166", "iraw.167", "iraw.168", "iraw.169", "iraw.170", "idur.1", 
+ "idur.2", "idur.3", "idur.4", "idur.5", "idur.6", "idur.7", "idur.8", 
+ "idur.9", "idur.10", "idur.11", "idur.12", "idur.13", "idur.14", 
+ "idur.15", "idur.16", "idur.17", "idur.18", "idur.19", "idur.20", 
+ "idur.21", "idur.22", "idur.23", "idur.24", "idur.25", "idur.26", 
+ "idur.27", "idur.28", "idur.29", "idur.30", "idur.31", "idur.32", 
+ "idur.33", "idur.34", "idur.35", "idur.36", "idur.37", "idur.38", 
+ "idur.39", "idur.40", "idur.41", "idur.42", "idur.43", "idur.44", 
+ "idur.45", "idur.46", "idur.47", "idur.48", "idur.49", "idur.50", 
+ "idur.51", "idur.52", "idur.53", "idur.54", "idur.55", "idur.56", 
+ "idur.57", "idur.58", "idur.59", "idur.60", "idur.61", "idur.62", 
+ "idur.63", "idur.64", "idur.65", "idur.66", "idur.67", "idur.68", 
+ "idur.69", "idur.70", "idur.71", "idur.72", "idur.73", "idur.74", 
+ "idur.75", "idur.76", "idur.77", "idur.78", "idur.79", "idur.80", 
+ "idur.81", "idur.82", "idur.83", "idur.84", "idur.85", "idur.86", 
+ "idur.87", "idur.88", "idur.89", "idur.90", "idur.91", "idur.92", 
+ "idur.93", "idur.94", "idur.95", "idur.96", "idur.97", "idur.98", 
+ "idur.99", "idur.100", "idur.101", "idur.102", "idur.103", "idur.104", 
+ "idur.105", "idur.106", "idur.107", "idur.108", "idur.109", "idur.110", 
+ "idur.111", "idur.112", "idur.113", "idur.114", "idur.115", "idur.116", 
+ "idur.117", "idur.118", "idur.119", "idur.120", "idur.121", "idur.122", 
+ "idur.123", "idur.124", "idur.125", "idur.126", "idur.127", "idur.128", 
+ "idur.129", "idur.130", "idur.131", "idur.132", "idur.133", "idur.134", 
+ "idur.135", "idur.136", "idur.137", "idur.138", "idur.139", "idur.140", 
+ "idur.141", "idur.142", "idur.143", "idur.144", "idur.145", "idur.146", 
+ "idur.147", "idur.148", "idur.149", "idur.150", "idur.151", "idur.152", 
+ "idur.153", "idur.154", "idur.155", "idur.156", "idur.157", "idur.158", 
+ "idur.159", "idur.160", "idur.161", "idur.162", "idur.163", "idur.164", 
+ "idur.165", "idur.166", "idur.167", "idur.168", "idur.169", "idur.170", 
+ "tsüre", "deneme", "hız", "yetenek", "AKB", "DKB", "EKB", "G", 
+ "Ht", "lz", "lzstar", "NCI", "PBS", "CSato", "CStar", "U3", "ZU3", 
+ "lt")

**.6 için

> imp<-as.matrix(imp)
> col<-as.matrix(col)
> dd<-cbind(col,imp)
> dd<-edit(dd)

> d1<-yanıtlar[,57]
> d2<-yanıtlar[,63]
> d3<-yanıtlar[,73]
> d4<-yanıtlar[,86]
> d5<-yanıtlar[,97]
> d6<-yanıtlar[,99]
> d7<-yanıtlar[,152]
> d8<-yanıtlar[,157]
> 
> l1<-rt[,2]
> l2<-rt[,4]
> l3<-rt[,6:10]
> l34<-rt[,12:21]
> l4<-rt[,34]
> l4<-rt[,24]
> l5<-rt[,26:31]
> l6<-rt[,33:34]
> l7<-rt[,36:43]
> l8<-rt[,46:49]
> l9<-rt[,52]
> r1<-rt[,58:59]
> r2<-rt[,64:68]
> r3<-rt[,72]
> r4<-rt[,76:78]
> r5<-rt[,81:83]
> r6<-rt[,86:87]
> r7<-rt[,89]
> r8<-rt[,91]
> r9<-rt[,96:97]
> n1<-rt[,99:100]
> n2<-rt[,102:103]
> n3<-rt[,105:108]
> n4<-rt[,110]
> n5<-rt[,113:114]
> n6<-rt[,117]
> n7<-rt[,120:124]
> n8<-rt[,127:128]
> n9<-rt[,132]
> n10<-rt[,135]
> n11<-rt[,137:141]
> n112<-rt[,144:145]
> n12<-rt[,150:152]
> n13<-rt[,154]
> n14<-rt[,158:163]
> n15<-rt[,165:166]
> n16<-rt[,168:170]
> 
> veriseti<-cbind(d1,d2)
> veriseti<-cbind(veriseti,d3)
> veriseti<-cbind(veriseti,d4)
> veriseti<-cbind(veriseti,d5)
> veriseti<-cbind(veriseti,d6)
> veriseti<-cbind(veriseti,d7)
> veriseti<-cbind(veriseti,d8)
> veriseti<-cbind(veriseti,l1)
> veriseti<-cbind(veriseti,l2)
> veriseti<-cbind(veriseti,l3)
> veriseti<-cbind(veriseti,l4)
> veriseti<-cbind(veriseti,l5)
> veriseti<-cbind(veriseti,l6)
> veriseti<-cbind(veriseti,l7)
> veriseti<-cbind(veriseti,l8)
> veriseti<-cbind(veriseti,l9)
> veriseti<-cbind(veriseti,l34)
> veriseti<-cbind(veriseti,r1)
> veriseti<-cbind(veriseti,r2)
> veriseti<-cbind(veriseti,r3)
> veriseti<-cbind(veriseti,r4)
> veriseti<-cbind(veriseti,r5)
> veriseti<-cbind(veriseti,r6)
> veriseti<-cbind(veriseti,r7)
> veriseti<-cbind(veriseti,r8)
> veriseti<-cbind(veriseti,r9)
> veriseti<-cbind(veriseti,n1)
> veriseti<-cbind(veriseti,n2)
> veriseti<-cbind(veriseti,n3)
> veriseti<-cbind(veriseti,n4)
> veriseti<-cbind(veriseti,n5)
> veriseti<-cbind(veriseti,n6)
> veriseti<-cbind(veriseti,n7)
> veriseti<-cbind(veriseti,n8)
> veriseti<-cbind(veriseti,n9)
> veriseti<-cbind(veriseti,n10)
> veriseti<-cbind(veriseti,n11)
> veriseti<-cbind(veriseti,n12)
> veriseti<-cbind(veriseti,n13)
> veriseti<-cbind(veriseti,n14)
> veriseti<-cbind(veriseti,n15)
> veriseti<-cbind(veriseti,n16)
> veriseti<-cbind(veriseti,n112)
 
> veriseti<-cbind(veriseti,flagged)
 
> veriseti<-edit(veriseti)


> ölcekleme<-function(x,na.rm=T){
+ return((x-min(x))/(max(x)-min(x)))
+ }

> veriseti[-113]<-ölcekleme(veriseti[-113])
> veriseti<-edit(veriseti)

> veriseti$flagged = factor(veriseti$flagged, levels = c(0, 1))
> library(caTools)
> set.seed(123)
> split = sample.split(veriseti$flagged, SplitRatio = 0.70)
> egitimset = subset(veriseti, split == TRUE)
> testset = subset(veriseti, split == FALSE)


> library(class)
> y_pred = knn(train = egitimset[,-113],
+ test = testset[,-113],
+  cl = egitimset[,113],
+ k = 5)
> cm = table(testset[, 113], y_pred)
> cm
   y_pred
      0   1
  0 475   2
  1   8   6
> 6/14*100
[1] 42.85714
> 
*********************************************************************************


> library(e1071)
> library(caTools)
> library(caret)

> classifier = naiveBayes(x = egitimset[-113],
+  y = egitimset$flagged)
> y_pred = predict(classifier, newdata = testset[-113])
> cm = table(testset[, 113], y_pred)
> cm
   y_pred
      0   1
  0 415  62
  1   7   7
> 7/14*100
[1] 50
> 415/477*100
[1] 87.0021


***********************************************************************************


> veriseti<-read.table("veriseti1.txt",header=T)
> veriseti<-edit(veriseti)
> library(randomForest)
randomForest 4.6-14
Type rfNews() to see new features/changes/bug fixes.
> library(datasets)
> library(caret)

> veriseti$flagged <- as.factor(veriseti$flagged)
> set.seed(123)
> ind <- sample(2, nrow(data3), replace = TRUE, prob = c(0.7, 0.3))
> egitim <- veriseti[ind==1,]
> test <- veriseti[ind==2,]
> 
> rf <- randomForest(flagged~., data=egitim, proximity=TRUE)
> print(rf)

Call:
 randomForest(formula = flagged ~ ., data = egitim, proximity = TRUE) 
               Type of random forest: classification
                     Number of trees: 500
No. of variables tried at each split: 10

        OOB estimate of  error rate: 2.52%
Confusion matrix:
     0 1 class.error
0 1123 0           0
1   29 0           1
> p1 <- predict(rf, egitim)
> confusionMatrix(p1, egitim$ flagged)
Confusion Matrix and Statistics

          Reference
Prediction    0    1
         0 1123    0
         1    0   29
                                     
               Accuracy : 1          
                 95% CI : (0.9968, 1)
    No Information Rate : 0.9748     
    P-Value [Acc > NIR] : 1.755e-13  
                                     
                  Kappa : 1          
                                     
 Mcnemar's Test P-Value : NA         
                                     
            Sensitivity : 1.0000     
            Specificity : 1.0000     
         Pos Pred Value : 1.0000     
         Neg Pred Value : 1.0000     
             Prevalence : 0.9748     
         Detection Rate : 0.9748     
   Detection Prevalence : 0.9748     
      Balanced Accuracy : 1.0000     
                                     
       'Positive' Class : 0          
                                     
> p2 <- predict(rf, test)
> confusionMatrix(p2, test$ flagged)
Confusion Matrix and Statistics

          Reference
Prediction   0   1
         0 467  17
         1   0   0
                                          
               Accuracy : 0.9649          
                 95% CI : (0.9444, 0.9794)
    No Information Rate : 0.9649          
    P-Value [Acc > NIR] : 0.5640332       
                                          
                  Kappa : 0               
                                          
 Mcnemar's Test P-Value : 0.0001042       
                                          
            Sensitivity : 1.0000          
            Specificity : 0.0000          
         Pos Pred Value : 0.9649          
         Neg Pred Value :    NaN          
             Prevalence : 0.9649          
         Detection Rate : 0.9649          
   Detection Prevalence : 1.0000          
      Balanced Accuracy : 0.5000          
                                          
       'Positive' Class : 0      

**1 için

> dat1<-read.table("dat1.txt",header=T)
> library(randomForest)
> library(datasets)
> library(caret)

veri1$flagged = factor(veri1$flagged, levels = c(0, 1))
library(caTools)
set.seed(123)
split = sample.split(veri1$flagged, SplitRatio = 0.70)
egitimset = subset(veri1, split == TRUE)
testset = subset(veri1, split == FALSE)


> veri$flagged <- as.factor(veri$flagged)
> set.seed(123)
> ind <- sample(2, nrow(veriseti), replace = TRUE, prob = c(0.7, 0.3))
> egitim <- veriseti[ind==1,]
> test <- veriseti[ind==2,]
> 
> rf <- randomForest(flagged~., data=egitim, proximity=TRUE)
> print(rf)
>  p1 <- predict(rf, egitim)
>  confusionMatrix(p1, egitim$ flagged)
> p2 <- predict(rf, test)
> confusionMatrix(p2, test$ flagged)
> 8/17*100
[1] 47.05882 
diğeri %100

******************************************************************

> library(randomForest)

> veri1<-read.table("veri1.txt",header = T)

> veri$flagged = factor(veri$flagged, levels = c(0, 1))
> rf<-randomForest(flagged~.,data=veri,importance=T,proximity=T)
> round(importance(rf),2)










library(class)
library(caTools)
set.seed(123)
split = sample.split(yeni$flagged, SplitRatio = 0.67)
egitimset = subset(yeni, split == TRUE)
testset = subset(yeni, split == FALSE)

y_pred = knn(train = egitimset[,-112],
test = testset[,-112],
 cl = egitimset[,112],
k = 5)
cm = table(testset[, 112], y_pred)
cm